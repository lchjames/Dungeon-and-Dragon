(function () {
  const DB_KEY = 'vault-v3'; let db = loadDB(); function loadDB() { try { return JSON.parse(localStorage.getItem(DB_KEY)) || { characters: [] } } catch { return { characters: [] } } }
  function saveDB() { localStorage.setItem(DB_KEY, JSON.stringify(db)) }
  function byId(id) { return document.getElementById(id) }
  const tpl = byId('tpl-card')
  function render() { const g = byId('characters-grid'); g.innerHTML = ''; const q = (byId('char-search').value || '').toLowerCase(); db.characters.filter(c => !q || c.name.toLowerCase().includes(q) || c.job.toLowerCase().includes(q)).forEach(c => { const n = tpl.content.firstElementChild.cloneNode(true); n.querySelector('[data-name]').textContent = c.name; n.querySelector('[data-id]').textContent = c.id; n.querySelector('[data-job]').textContent = c.job; n.querySelector('[data-edit]').onclick = () => openEditor(c.id); g.appendChild(n) }); if (!g.children.length) { g.innerHTML = '<p class=muted>沒有角色</p>' } }
  function openEditor(id) { const dlg = byId('char-dialog'); const f = byId('char-form'); let c = db.characters.find(x => x.id === id) || { id: 'C_' + Math.random().toString(36).slice(2, 8), name: '', job: '' }; f.id.value = c.id; f.name.value = c.name; f.job.value = c.job; byId('delete-character').onclick = () => { db.characters = db.characters.filter(x => x.id !== c.id); saveDB(); dlg.close(); render() }; f.onsubmit = e => { e.preventDefault(); c = { id: f.id.value, name: f.name.value, job: f.job.value }; const i = db.characters.findIndex(x => x.id === c.id); if (i >= 0) db.characters[i] = c; else db.characters.push(c); saveDB(); dlg.close(); render() }; dlg.showModal() }
  byId('add-character').onclick = () => openEditor(null)
  byId('char-search').oninput = render
  byId('excel-import').onchange = async e => { const f = e.target.files[0]; if (!f) return; const hud = byId('excel-status'); try { hud.textContent = '載入中...'; const buf = await f.arrayBuffer(); const wb = XLSX.read(buf, { type: 'array' }); const ws = wb.Sheets[wb.SheetNames[0]]; const rows = XLSX.utils.sheet_to_json(ws, { header: 1 }); const name = rows[1][1]; const job = rows[2][1]; db.characters.push({ id: 'C_' + Math.random().toString(36).slice(2, 8), name, job }); saveDB(); render(); hud.textContent = '完成' } catch (err) { hud.textContent = '錯誤:' + err } finally { e.target.value = '' } };
  render()
})();